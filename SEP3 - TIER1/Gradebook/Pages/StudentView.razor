@page "/Student"
@using WebApplication.Models
@using WebApplication.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider

<head>
    <link rel="stylesheet" href="css/gradeTable.css">
    <link rel="stylesheet" href="css/overallTheme.css">
</head>

<div>
    <h2 class="blue-border center-horiz">Student - <b>@student.firstName @student.lastName</b>, ID = @student.id</h2>
</div>

<br>

<div class="blue-border">
<table>
    @foreach (String course in courses)
    {
        <tr>
            <th class="course">@course</th>
            <tr>
                <td style="width: 7em">Grades</td>
                <tr>
                    @foreach (Grade grade in student.grades)
                    {
                        string gradeOpacity = "0." + (int)(grade.grade*0.9);
                        if (grade.grade == 10) gradeOpacity = "1";
                        string gradeColor = "rgba(15, 180, 255, " + gradeOpacity + ")";
                        Console.WriteLine(grade.grade/10.0);
                        if (grade.course.Equals(course))
                        {
                            <td class="cell" style="background-color: @gradeColor">@grade.grade</td>
                        }
                    }
                </tr>
                <tr>
                    @foreach (Grade grade in student.grades)
                    {
                        if (grade.course.Equals(course))
                        {
                            <td class="cell">@grade.date</td>
                        }
                    }
                </tr>
            </tr>
            <tr>
                <td style="width: 7em">Absences</td>
                <tr>
                    @foreach (Absence absence in student.absences)
                    {
                        if (absence.course.Equals(course))
                        {
                            if (absence.motivated)
                            {
                                <td class="cell" style="background-color: #8aff78">Motivated</td>
                            }
                            else
                            {
                                <td class="cell" style="background-color: #ff606f">Unmotivated</td>   
                            }
                        }
                    }
                </tr>
                <tr>
                    @foreach (Absence absence in student.absences)
                    {
                        if (absence.course.Equals(course))
                        {
                            <td class="cell">@absence.date</td>
                        }
                    }
                </tr>
            </tr>
        </tr>
    }
</table>
</div>

<br>

<div class="blue-border center-horiz">
<h4>Student's address: <b>@student.address</b></h4>
<h4>Student's phone number: <b>@student.phoneNumber</b></h4>
</div>

<br>

@code {
    Student student = CustomAuthenticationStateProvider.CachedStudent;
    List<string> courses = new List<string>();

    private void ExtractCourses()
    {
        foreach (Grade grade in student.grades)
        {
            if (courses == null)
            {
                courses.Add(grade.course);
            }
            else if (!courses.Contains(grade.course))
            {
                courses.Add(grade.course);
            }
        }
        foreach (Absence absence in student.absences)
        {
            if(courses==null) courses.Add(absence.course);
            else if (!courses.Contains(absence.course))
            {
                courses.Add(absence.course);
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ExtractCourses();
    }
}