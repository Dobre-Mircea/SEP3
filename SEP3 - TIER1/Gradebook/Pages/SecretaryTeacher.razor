@page "/SecretaryTeacher"
@using WebApplication.Models
@using WebApplication.Authentication
@using WebApplication.Data
@using WebApplication.NetworkPackages
@using System.Text.Json

<head>
    <link rel="stylesheet" href="css/overallTheme.css">
</head>

<div class="blue-border container">
    <br>
    <div class="row">
        <div class="col">
            <h3 class="center-horiz">Create Teacher</h3>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-3 center-horiz form-group">
            <label for="fname">First name:</label>
            <input type="text" class="form-control" id="fname" placeholder="Adam" @bind="@createFirstName">
        </div>
        <div class="col-3 center-horiz form-group">
            <label for="lname">Last name:</label>
            <input type="text" class="form-control" id="lname" placeholder="Adam" @bind="@createLastName">
        </div>
        <div class="col-3 center-horiz form-group">
            <label for="password">Password:</label>
            <input type="password" class="form-control" id="password" placeholder="********" @bind="@createPassword">
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <button class="btn btn-default btn-success" @onclick="CreateTeacher" disabled="@teacherCreationBool()">Create Teacher</button>
        </div>
    </div>
    <br>
</div>

<div class="container blue-border" style="margin-top: 3em">
    <br>
    <div class="row">
        <div class="col">
            <h3 class="center-horiz">Edit Teacher</h3>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <label for="selectTeacher">Select Teacher:</label>
            <select class="form-control" id="selectTeacher" @bind="@selectedTeacherAsString">
                <option value="" selected disabled hidden>Choose teacher...</option>
                @foreach (Teacher teacher in secretary.teachers)
                {
                    string teacherAsString = JsonSerializer.Serialize(teacher);
                    <option value="@teacherAsString">@teacher.id - @teacher.firstName @teacher.lastName</option>
                }
            </select>
            <button class="btn btn-default btn-danger" style="margin-left: 1em" @onclick="DeleteTeacher" disabled=@teacherIsSelected()>Delete Teacher</button>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz form-group">
            <label for="password2">Password:</label>
            <input type="password" class="form-control" id="password2" placeholder="********" @bind="@editedPassword">
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col center-horiz">
            <button class="btn btn-default btn-primary" @onclick="EditTeacher" disabled="@teacherCreationBool()">Edit Teacher</button>
        </div>
    </div>
    <br>
</div>

@code {
    Secretary secretary = CustomAuthenticationStateProvider.CachedSecretary;
    ISecretaryService SecretaryService = new SecretaryService();

    //Regarding creating teacher
    string createFirstName;
    string createLastName;
    string createPassword;

    //Regarding editing a teacher
    Teacher selectedTeacher;
    string selectedTeacherAsString;
    string editedPassword;

    bool teacherCreationBool()
    {
        return !(createFirstName != null && createLastName != null && createPassword != null);
    }
    
    bool teacherIsSelected()
    {
        return !(selectedTeacherAsString != null);
    }

    async Task CreateTeacher()
    {
        NetworkPackage package = await SecretaryService.CreateTeacher(createFirstName, createLastName, createPassword);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - CREATE TEACHER");
        }
    }
    
    async Task EditTeacher()
    {
        selectedTeacher = JsonSerializer.Deserialize<Teacher>(selectedTeacherAsString);
        NetworkPackage package = await SecretaryService.EditTeacher(selectedTeacher.id, editedPassword);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - EDIT TEACHER");
        }
    }

    async Task DeleteTeacher()
    {
        selectedTeacher = JsonSerializer.Deserialize<Teacher>(selectedTeacherAsString);
        NetworkPackage package = await SecretaryService.DeleteTeacher(selectedTeacher.id);
        Console.WriteLine(selectedTeacher.id);
        if (package != null)
        {
            SecretaryDataPackage secretaryDataPackage = (SecretaryDataPackage) package;
            CustomAuthenticationStateProvider.CachedSecretary = secretaryDataPackage.data;
            secretary = secretaryDataPackage.data;
        }
        else if (package == null)
        {
            Console.WriteLine("BAD REQUEST - DELETE TEACHER");
        }
    }
}